{"version":3,"sources":["webpack:///./src/components/sidebar/Bio.js","webpack:///./src/components/sidebar/SocialLinks.js","webpack:///./src/components/sidebar/Sidebar.js","webpack:///./src/templates/tag.js","webpack:///./src/components/tags/TechTag.js"],"names":["Bio","author","tagline","className","src","ahacad","style","maxWidth","alt","SocialLinks","contacts","href","linkedin","title","size","color","github","stackoverflow","twitter","Sidebar","query","render","data","site","siteMetadata","to","Tag","pageContext","posts","allMarkdownRemark","edges","labels","console","log","tag","totalCount","tagHeader","keywords","map","post","tags","node","frontmatter","key","id","fields","slug","date","excerpt","techTags","forEach","i","label","push","tech","name","getTechTags","TechTag","props","fontSize","role","viewBox","xmlns","width","height","fill","d"],"mappings":"kNAgBeA,EAXH,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAEnB,OACI,yBAAKC,UAAU,iBACX,yBAAKC,IAAKC,IAAQC,MAAO,CAAEC,SAAS,SAAYJ,UAAU,cAAcK,IAAI,KAC5E,wBAAIL,UAAU,mBAAmBF,GACjC,2BAAOE,UAAU,cAAcD,K,YC8B5BO,EA/BK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACI,yBAAKP,UAAU,0CACX,uBAAGA,UAAU,qBACTQ,KAAMD,EAASE,UACf,0BAAMC,MAAM,aACR,kBAAC,IAAD,CAAYC,KAAM,GAAIR,MAAO,CAAES,MAAO,iBAG9C,uBAAGZ,UAAU,qBACTQ,KAAMD,EAASM,QACf,0BAAMH,MAAM,UACR,kBAAC,IAAD,CAAgBC,KAAM,GAAIR,MAAO,CAAES,MAAO,iBAGlD,uBAAGZ,UAAU,qBACTQ,KAAMD,EAASO,eACf,0BAAMJ,MAAM,kBACR,kBAAC,IAAD,CAAiBC,KAAM,GAAIR,MAAO,CAAES,MAAO,iBAGnD,uBAAGZ,UAAU,qBACTQ,KAAMD,EAASQ,SACf,0BAAML,MAAM,WACR,kBAAC,IAAD,CAAiBC,KAAM,GAAIR,MAAO,CAAES,MAAO,mB,UCoChDI,IA7DC,WACZ,OACI,kBAAC,cAAD,CACIC,MAAK,aAsCLC,OAAQ,SAAAC,GAAI,OACR,oCACI,yBAAKnB,UAAU,6BACX,kBAAC,EAAD,CAAKF,OAAQqB,EAAKC,KAAKC,aAAavB,OAAQC,QAASoB,EAAKC,KAAKC,aAAatB,UAC5E,kBAAC,EAAD,CAAaQ,SAAUY,EAAKC,KAAKC,aAAad,WAC9C,yBAAKP,UAAU,cACX,kBAAC,OAAD,CAAMsB,GAAG,KAAI,0BAAMtB,UAAU,0BAAhB,cACb,kBAAC,OAAD,CAAMsB,GAAG,UAAS,0BAAMtB,UAAU,0BAAhB,UAClB,kBAAC,OAAD,CAAMsB,GAAG,UAAS,0BAAMtB,UAAU,0BAAhB,kB,yDC1D9C,kHAsIeuB,UA3HH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaL,EAAW,EAAXA,KAClBM,EAAQN,EAAKO,kBAAkBC,MAC/BC,EAAST,EAAKC,KAAKC,aAAaO,OACtCC,QAAQC,IAAIN,EAAYO,KAHW,IAI3BA,EAAQP,EAARO,IACAC,EAAeb,EAAKO,kBAApBM,WACFC,EAAeD,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,iBAEMD,EAFN,IAgBf,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKrB,MAAM,OAAOwB,SAAU,CAAC,SAAD,8DAC5B,yBAAKlC,UAAU,cACX,yBAAKA,UAAU,qBACX,kBAAC,IAAD,OAGJ,yBAAKA,UAAU,kBACX,2BAAG,wBAAIA,UAAU,WAAWiC,IAC3BR,EAAMU,KAAI,SAACC,GACR,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACI,yBAAKG,IAAKJ,EAAKE,KAAKG,GAAIzC,UAAU,kBAC9B,kBAAC,OAAD,CACIsB,GAAIc,EAAKE,KAAKI,OAAOC,KACrB3C,UAAU,aAEV,wBAAIA,UAAU,WAAWoC,EAAKE,KAAKC,YAAY7B,QAEnD,2BAAOV,UAAU,qBAAjB,aAAgDoC,EAAKE,KAAKC,YAAYK,MAEtE,uBAAG5C,UAAU,iBAAiBoC,EAAKE,KAAKO,SACxC,kBAAC,OAAD,CACIvB,GAAIc,EAAKE,KAAKI,OAAOC,KACrB3C,UAAU,gBAEV,2BAAOA,UAAU,uBAAjB,oBAEJ,yBAAKA,UAAU,WAzCvB,SAACqC,GACjB,IAAMS,EAAW,GAQjB,OAPAT,EAAKU,SAAQ,SAAChB,EAAKiB,GACfpB,EAAOmB,SAAQ,SAACE,GACRlB,IAAQkB,EAAMlB,KACde,EAASI,KAAK,kBAAC,IAAD,CAASV,IAAKQ,EAAGjB,IAAKkB,EAAMlB,IAAKoB,KAAMF,EAAME,KAAMC,KAAMH,EAAMG,KAAMzC,KAAMsC,EAAMtC,KAAMC,MAAOqC,EAAMrC,eAIvHkC,EAiCsBO,CAAYhB,a,oCC/DjD,iDA2BeiB,IAtBC,SAACC,GAAW,IAChBxB,EAAiCwB,EAAjCxB,IAAKoB,EAA4BI,EAA5BJ,KAAMC,EAAsBG,EAAtBH,KAAMzC,EAAgB4C,EAAhB5C,KAAMC,EAAU2C,EAAV3C,MAE/B,OACI,yBAAKZ,UAAU,sBACX,kBAAC,OAAD,CAAMsB,GAAE,SAAWS,EAAX,KACJ,4BACI/B,UAAU,uBACV,uBAAGA,UAAU,YAAYmD,EAAzB,KACA,yBAAKnD,UAAU,WAAWG,MAAO,CAAEqD,SAAU7C,EAAMC,MAAOA,IAAS,yBAAK6C,KAAK,MAAMC,QAAQ,YAAYC,MAAM,6BAA6BC,MAAOjD,EAAMkD,OAAQlD,EAAMR,MAAO,CAAC2D,KAAK,GAAIlD,IAC9K,+BAAQuC,GACR,0BACIY,EAAGX","file":"component---src-templates-tag-js-f769eabe08cd68953fa0.js","sourcesContent":["import React from \"react\"\nimport \"./sidebar.css\"\n\nimport ahacad from \"../../images/ahacad.jpg\"\n\nconst Bio = ({ author, tagline }) => {\n\n    return (\n        <div className=\"bio-main w-75\">\n            <img src={ahacad} style={{ maxWidth: `100px` }} className=\"profile-img\" alt=\"\" />\n            <h3 className=\"mt-2 author-bio\">{author}</h3>\n            <small className=\"text-muted\">{tagline}</small>\n        </div>\n    )\n}\n\nexport default Bio\n","import React from \"react\"\nimport {\n    FaLinkedin,\n    FaGithubSquare,\n    FaStackOverflow,\n    FaTwitterSquare\n} from \"react-icons/fa\"\nimport \"./sidebar.css\"\n\n\nconst SocialLinks = ({ contacts }) => {\n    return (\n        <div className=\"side-social-links float-left mt-3 mb-3\">\n            <a className=\"text-secondary p-2\"\n                href={contacts.linkedin}>\n                <span title=\"Linked In\">\n                    <FaLinkedin size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.github}>\n                <span title=\"GitHub\">\n                    <FaGithubSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.stackoverflow}>\n                <span title=\"Stack Overflow\">\n                    <FaStackOverflow size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n            <a className=\"text-secondary p-2\"\n                href={contacts.twitter}>\n                <span title=\"Twitter\">\n                    <FaTwitterSquare size={26} style={{ color: \"secondary\" }} />\n                </span>\n            </a>\n        </div>\n    )\n}\n\nexport default SocialLinks\n","import React from \"react\"\nimport { StaticQuery, graphql, Link } from \"gatsby\"\nimport Bio from \"./Bio\"\nimport \"./sidebar.css\"\n\nimport SocialLinks from \"./SocialLinks\"\nimport TechTags from \"./TechTags\"\n\n\nconst Sidebar = () => {\n    return (\n        <StaticQuery\n            query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n            render={data => (\n                <>\n                    <div className=\"sidebar-main border-right\">\n                        <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n                        <SocialLinks contacts={data.site.siteMetadata.contacts} />\n                        <div className=\"page-links\">\n                            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n                            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n                            <Link to=\"/books\"><span className=\"text-dark d-block py-1\">Books</span></Link>\n                        </div>\n                        {/* <div className=\"tech-tags mt-4\">\n                            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n                        </div> */}\n                    </div>\n                </>\n            )}\n        />\n    )\n}\n\nexport default Sidebar\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport \"../pages/index.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Sidebar from \"../components/sidebar/Sidebar\"\nimport TechTag from \"../components/tags/TechTag\"\n\nconst Tag = ({ pageContext, data }) => {\n    const posts = data.allMarkdownRemark.edges\n    const labels = data.site.siteMetadata.labels\n    console.log(pageContext.tag)\n    const { tag } = pageContext\n    const { totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} post${\n        totalCount === 1 ? \"\" : \"s\"\n        } tagged with \"${tag}\"`\n\n    const getTechTags = (tags) => {\n        const techTags = []\n        tags.forEach((tag, i) => {\n            labels.forEach((label) => {\n                if (tag === label.tag) {\n                    techTags.push(<TechTag key={i} tag={label.tag} tech={label.tech} name={label.name} size={label.size} color={label.color} />)\n                }\n            })\n        })\n        return techTags\n    }\n\n    return (\n        <Layout>\n            <SEO title=\"Home\" keywords={[`gatsby`, `javascript`, `react`, `web development`, `node.js`, `graphql`]} />\n            <div className=\"index-main\">\n                <div className=\"sidebar px-4 py-2\">\n                    <Sidebar />\n                </div>\n\n                <div className=\"post-list-main\">\n                    <i><h2 className=\"heading\">{tagHeader}</h2></i>\n                    {posts.map((post) => {\n                        const tags = post.node.frontmatter.tags\n                        return (\n                            <div key={post.node.id} className=\"container mt-5\">\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-dark\"\n                                >\n                                    <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                                </Link>\n                                <small className=\"d-block text-info\">Posted on {post.node.frontmatter.date}\n                                </small>\n                                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                                <Link\n                                    to={post.node.fields.slug}\n                                    className=\"text-primary\"\n                                >\n                                    <small className=\"d-inline-block ml-3\"> Read full post</small>\n                                </Link>\n                                <div className=\"d-block\">\n                                    {getTechTags(tags)}\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nTag.propTypes = {\n    pageContext: PropTypes.shape({\n        tag: PropTypes.string.isRequired,\n    }),\n    data: PropTypes.shape({\n        allMarkdownRemark: PropTypes.shape({\n            totalCount: PropTypes.number.isRequired,\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    node: PropTypes.shape({\n                        frontmatter: PropTypes.shape({\n                            title: PropTypes.string.isRequired,\n                        }),\n                    }),\n                }).isRequired\n            ),\n        }),\n    }),\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n        siteMetadata {\n            title \n            author\n            labels {\n                tag\n                tech \n                name \n                size \n                color\n            } \n        }\n    } \n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n         node {\n            excerpt(pruneLength: 200)\n            html\n            id\n            frontmatter {\n                title\n                date(formatString: \"MMMM, YYYY\")\n                tags\n            }\n             fields {\n                slug\n            }\n        }\n      }\n    }\n  }\n`\n\nexport default Tag","import React from \"react\"\n\nimport \"./tags.css\"\nimport { Link } from \"gatsby\";\n\nconst TechTag = (props) => {\n    const { tag, tech, name, size, color } = props\n\n    return (\n        <div className=\"d-inline-block p-1\">\n            <Link to={`/tags/${tag}/`}>\n                <button\n                    className=\"tech-tag text-white\">\n                    <p className=\"d-inline\">{tech} </p>\n                    <div className=\"d-inline\" style={{ fontSize: size, color: color }}><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} style={{fill: `${color}`}}>\n                            <title>{tech}</title>\n                            <path\n                                d={name} />\n                        </svg></div>\n                </button>\n            </Link>\n\n        </div>\n\n    )\n}\n\nexport default TechTag"],"sourceRoot":""}